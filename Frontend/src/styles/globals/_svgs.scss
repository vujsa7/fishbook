@use "sass:math";

$back-arrow: '<svg width="29" height="8" viewBox="0 0 29 8" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M28 4.5C28.2761 4.5 28.5 4.27614 28.5 4C28.5 3.72386 28.2761 3.5 28 3.5L28 4.5ZM0.646444 3.64644C0.451183 3.84171 0.451183 4.15829 0.646444 4.35355L3.82842 7.53553C4.02369 7.73079 4.34027 7.73079 4.53553 7.53553C4.73079 7.34027 4.73079 7.02369 4.53553 6.82843L1.70711 4L4.53553 1.17157C4.7308 0.976309 4.7308 0.659726 4.53553 0.464464C4.34027 0.269202 4.02369 0.269202 3.82842 0.464464L0.646444 3.64644ZM28 3.5L0.999998 3.5L0.999998 4.5L28 4.5L28 3.5Z" fill="#084B83"/></svg>';

@function svg-url($svg) {
    @if not str-index($svg, xmlns) {
      $svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    $encoded: "";
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));
    @for $i from 1 through $loops {
      $chunk: str-slice($svg, $index, $index + $slice - 1);
      //   Encode
      $chunk: str-replace($chunk, '"', "'");
      $chunk: str-replace($chunk, "%", "%25");
      $chunk: str-replace($chunk, "&", "%26");
      $chunk: str-replace($chunk, "#", "%23");
      $chunk: str-replace($chunk, "{", "%7B");
      $chunk: str-replace($chunk, "}", "%7D");
      $chunk: str-replace($chunk, "<", "%3C");
      $chunk: str-replace($chunk, ">", "%3E");
  
      //
      //    The maybe list
      //
      //    Keep size and compile time down
      //    ... only add on documented fail
      //
      //  $chunk: str-replace($chunk, '|', '%7C');
      //  $chunk: str-replace($chunk, '[', '%5B');
      //  $chunk: str-replace($chunk, ']', '%5D');
      //  $chunk: str-replace($chunk, '^', '%5E');
      //  $chunk: str-replace($chunk, '`', '%60');
      //  $chunk: str-replace($chunk, ';', '%3B');
      //  $chunk: str-replace($chunk, '?', '%3F');
      //  $chunk: str-replace($chunk, ':', '%3A');
      //  $chunk: str-replace($chunk, '@', '%40');
      //  $chunk: str-replace($chunk, '=', '%3D');
  
      $encoded: #{$encoded}#{$chunk};
      $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
  }
  
  //  Background svg mixin
  @mixin background-svg($svg) {
    background-image: svg-url($svg);
  }
  
  //  Helper function to replace characters in a string
  @function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @return if(
      $index,
      str-slice($string, 1, $index - 1) + $replace +
        str-replace(
          str-slice($string, $index + str-length($search)),
          $search,
          $replace
        ),
      $string
    );
  }